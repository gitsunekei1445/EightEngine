import sys
sys.path.append("..")
from OpenGL.GL import glClearColor,glClear,GL_COLOR_BUFFER_BIT,GL_DEPTH_BUFFER_BIT,glLoadIdentity,glGenVertexArrays,glGenBuffers,glGenTextures,\
    glBindVertexArray,glBindBuffer,glBufferData,GL_VERTEX_SHADER,GL_FRAGMENT_SHADER,GL_ARRAY_BUFFER,GL_STATIC_DRAW,\
    glEnableVertexAttribArray,glVertexPointer,GL_FALSE,GL_FLOAT,ctypes,glUseProgram,glEnable,GL_DEPTH_TEST,GL_BLEND,\
    GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA,glBlendFunc,glBindTexture,glDrawArrays,GL_TEXTURE_2D,GL_TRIANGLES,glUniformMatrix4fv,\
    glGetUniformLocation,glVertexAttribPointer

from OpenGL.GL.shaders import compileProgram,compileShader

import numpy as np
import pyrr

from EightEngine.ObjLoader import ObjLoader
from EightEngine.TextureLoader import load_texture

class Rendering:
    def __init__(self):
        self.numberModel=0
        self.numberTexture = 0
        self.VAO = None
        self.VBO = None
        self.texture = None

    @staticmethod
    def set_background(red=0,green=0,blue=0,alpha=1.0):
        # version 0.1
        glClearColor(red,green,blue,alpha)

    @staticmethod
    def render_update():
        # version 0.1
        glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)
        glLoadIdentity()

    def set_numberModel(self,number):
        # version 0.1
        self.numberModel = number
        self.VAO = glGenVertexArrays(number)
        self.VBO = glGenBuffers(number)

    def set_numberTexture(self,number):
        # version 0.1
        self.numberTexture = number
        self.texture = glGenTextures(number)

    def loaderModel(self,modelPath,numberModel,x,y,z):
        # version 0.1
        if self.numberModel < numberModel:
            raise Exception('numberModel null from model array')
        else:
            model = Model(self.VAO[numberModel-1],self.VBO[numberModel-1],modelPath,numberModel,x,y,z)
            return model
    def loaderTexTure(self,texturePath,numberTexture):
        # version 0.1
        if self.numberTexture < numberTexture:
            raise Exception('numberModel null from model array')
        else:
            texture = Texture(texturePath,self.texture[numberTexture-1])
            return texture



class Model:
    def __init__(self,VAO,VBO,modelPath,number,x=0,y=0,z=0):
        # version 0.2
        self.numberModel =number-1
        self.positionX=x
        self.positionY=y
        self.positionZ=z
        self.VAO = VAO
        self.VBO = VBO
        self.model_pos = None
        self.modelPath = modelPath
        self.vertex_src = """
        # version 330
        layout(location = 0) in vec3 a_position;
        layout(location = 1) in vec2 a_texture;
        layout(location = 2) in vec3 a_normal;
        uniform mat4 model;
        uniform mat4 projection;
        uniform mat4 view;
        out vec2 v_texture;
        void main()
        {
            gl_Position = projection * view * model * vec4(a_position, 1.0);
            v_texture = a_texture;
        }
        """
        self.fragment_src = """
        # version 330
        in vec2 v_texture;
        out vec4 out_color;
        uniform sampler2D s_texture;
        void main()
        {
            out_color = texture(s_texture, v_texture);
        }
        """
        self.model_indices,self.model_buffer = ObjLoader.load_model(modelPath)
        self.sharder = compileProgram(compileShader(self.vertex_src,GL_VERTEX_SHADER),compileShader(self.fragment_src,GL_FRAGMENT_SHADER))

        self.projection = pyrr.matrix44.create_perspective_projection_matrix(45,1280/720,0.1,100)

        glBindVertexArray(self.VAO)
        glBindBuffer(GL_ARRAY_BUFFER,self.VBO)
        glBufferData(GL_ARRAY_BUFFER,self.model_buffer.nbytes,self.model_buffer,GL_STATIC_DRAW)
        # model vertices
        glEnableVertexAttribArray(0)
        glVertexAttribPointer(0,3,GL_FLOAT,GL_FALSE,self.model_buffer.itemsize * 8,ctypes.c_void_p(0))
        # model texture
        glEnableVertexAttribArray(1)
        glVertexAttribPointer(1,2,GL_FLOAT,GL_FALSE,self.model_buffer.itemsize * 8,ctypes.c_void_p(12))
        # model normal vertices
        glEnableVertexAttribArray(2)
        glVertexAttribPointer(2,3,GL_FLOAT,GL_FALSE,self.model_buffer.itemsize * 8,ctypes.c_void_p(20))

        glUseProgram(self.sharder)
        glEnable(GL_DEPTH_TEST)
        glEnable(GL_BLEND)

        glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA)

        self.model_pos = pyrr.matrix44.create_from_translation(pyrr.Vector3([self.positionX,self.positionY,self.positionZ]))
        self.model_pos_src = pyrr.matrix44.create_from_translation(pyrr.Vector3([self.positionX,self.positionY,self.positionZ]))
        self.view = pyrr.matrix44.create_look_at(pyrr.Vector3([0, 0, 8]), pyrr.Vector3([0, 0, 0]), pyrr.Vector3([0, 1, 0]))

        self.model_loc = glGetUniformLocation(self.sharder,'model')
        self.proj_loc = glGetUniformLocation(self.sharder,'projection')
        self.view_loc = glGetUniformLocation(self.sharder,'view')

        glUniformMatrix4fv(self.proj_loc,1,GL_FALSE,self.projection)
        glUniformMatrix4fv(self.view_loc,1,GL_FALSE,self.view)

    def model_render(self,texture):
        # version 0.2
        glBindVertexArray(self.VAO)
        glBindTexture(GL_TEXTURE_2D,texture)
        glUniformMatrix4fv(self.model_loc,1,GL_FALSE,self.model_pos)
        glDrawArrays(GL_TRIANGLES,0,len(self.model_indices))
    def model_setProsition(self,x,y,z):
        # version 0.1
        self.positionX =x
        self.positionY =y
        self.positionZ =z
        self.model_pos = pyrr.matrix44.create_from_translation(pyrr.Vector3([self.positionX, self.positionY, self.positionZ]))
    def model_rotationY(self,degree):
        # version 0.1
        rot_y = pyrr.Matrix44.from_y_rotation(degree)
        self.model_pos = pyrr.matrix44.multiply(rot_y,self.model_pos_src)
    def model_rotationX(self,degree):
        # version 0.1
        rot_x = pyrr.Matrix44.from_x_rotation(degree)
        self.model_pos = pyrr.matrix44.multiply(rot_x,self.model_pos_src)

class Texture:
    def __init__(self,texturePath,texture):
        # version 0.1
        self.texture =texture
        self.texturePath = texturePath
        self.textures =load_texture(texturePath,self.texture)

from EightEngine.GUI import GUI
from glfw import init,get_time
if __name__ == '__main__':
    # Example GUI
    init()
    time1 = get_time()
    gui = GUI();
    gui.gui_create(1270, 720, 'test')
    time2 = get_time()
    print(time2 - time1)
    # Example Rendering
    render = Rendering()
    render.set_background(0,0,0,1)
    render.set_numberModel(3)
    render.set_numberTexture(3)
    model1 = render.loaderModel('cudeTest.obj',1,0,0,0)
    model2 = render.loaderModel('cudeTest.obj',2,0,-2,0)
    model3 = render.loaderModel('bg2font.obj',3,0,0,0)
    modelTexture1 = render.loaderTexTure('uv.png',1)
    modelTexture2 = render.loaderTexTure('uv1.png',2)
    modelTexture3 = render.loaderTexTure('uvbg.png',3)
    while not gui.gui_close:
        render.render_update()
        # model1.model_rotationY(0.8*get_time())
        # model1.model_render(modelTexture1.textures)
        # model2.model_render(modelTexture2.textures)
        model3.model_rotationX(1)
        model3.model_rotationY(0.8*get_time())
        model3.model_render(modelTexture3.textures)
        gui.gui_update()
        gui.gui_Fps()
